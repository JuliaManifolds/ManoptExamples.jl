---
title: "Minimizing the Acceleration of Bézier Curves on the Sphere"
author: "Ronny Bergmann"
date: 06/06/2023
---

```{julia}
#| echo: false
#| code-fold: true
#| output: false
using Pkg;
cd(@__DIR__)
Pkg.activate("."); # for reproducibility use the local tutorial environment.
Pkg.develop(path="../") # a trick to work on the local dev version
ENV["GKSwstype"] = "100"
export_asymptote = false # best only run locally
curve_samples_plot = [range(0, 3; length=201)...] # sample curve for asy exports
camera_position = (-1.0, -0.7, 0.3) # asy export camera position
#
# This should be set to false on CI and the images should be checked into git instead.
# The reason is that the images are rendered with asymptote and this would be a bit tricky to do on CI
img_folder = "img/bezier/"
experiment_name = "bezier_acceleration"
```

```{julia}
using Manifolds, Manopt, ManoptExamples
```
## Introduction

```{julia}
#| echo: false
#| code-fold: true
#| output: false
using Colors, NamedColors, ColorSchemes
curve_color = RGBA{Float64}(colorant"black")
sphere_color = RGBA{Float64}(colorant"brightgrey")
data_color = RGBA{Float64}(colorant"vibrantorange")
control_point_color = RGBA{Float64}(colorant"vibrantblue")
tangent_vector_color = RGBA{Float64}(colorant"vibrantcyan")
inner_control_point_color = RGBA{Float64}(colorant"vibrantteal")
```


Bézier Curves can be generalized to manifolds by generalizing the [de Casteljau algorithm 📖](https://en.wikipedia.org/wiki/De_Casteljau%27s_algorithm) to work with geodesics instead of straight lines.
An implementation in just a few lines as we demonstrated in [AxenBaranBergmannRzecki:2023](@cite) as

```{julia}
#| output: false
function bezier(M::AbstractManifold, t, pts::NTuple)
    p = bezier(M, t, pts[1:(end - 1)])
    q = bezier(M, t, pts[2:end])
    return shortest_geodesic(M, p, q, t)
end
function bezier(M::AbstractManifold, t, pts::NTuple{2})
    return shortest_geodesic(M, pts[1], pts[2], t)
end
```

which is also available within this package as ``[`de_Casteljau`](@ref ManoptExamples.de_Casteljau)``{=commonmark}
using a simple ``[`BezierSegment`](@ref ManoptExamples.BezierSegment)``{=commonmark} `struct` to make it easier to also discuss
the case where we compose a set of segments into a composite Bézier course.

In the following we will need the following packages and functions.
They are documented in the section on ``[Bezier Curves](@ref BezierCurves)``{=commonmark}
and were derived in [BergmannGousenbourger:2018](@cite) based on [PopielNoakes:2007](@cite).

```{julia}
#| output: false
using ManoptExamples:
    artificial_S2_composite_Bezier_curve,
    BezierSegment,
    de_Casteljau,
    get_Bezier_degrees,
    get_Bezier_inner_points,
    get_Bezier_junctions,
    get_Bezier_junction_tangent_vectors,
    get_Bezier_points,
    get_Bezier_segments,
    grad_L2_acceleration_Bezier,
    L2_acceleration_Bezier
```

This notebook reproduces the example form Section 5.2 in [BergmannGousenbourger:2018](@cite).

The following image illustrates how the de-Casteljau algorithm works for
one segment.

![A Bezier segment and illustration of the de-Casteljau algorithm](img/bezier/Casteljau-illustr.png)

## Approximating data by a curve with minimal accelartion

We first load our example data

```{julia}
#| output: false
M = Sphere(2)
B = artificial_S2_composite_Bezier_curve()
data_points = get_Bezier_junctions(M, B)
```
```{julia}
#| echo: false
#| code-fold: true
#| output: false
if export_asymptote
    original_curve_plot_pts = de_Casteljau(M, B, curve_samples_plot)
    # export original data.
    asymptote_export_S2_signals(
        joinpath(img_folder, experiment_name * "-orig.asy");
        curves=[original_curve_plot_pts],
        points=[get_Bezier_junctions(M, B), get_Bezier_inner_points(M, B)],
        tangent_vectors=[[
            Tuple(a) for a in
            zip(get_Bezier_junctions(M, B, true), get_Bezier_junction_tangent_vectors(M, B))
        ]],
        colors=Dict(
            :curves => [curve_color], :points => [data_color, inner_control_point_color], :tvectors => [tangent_vector_color]
        ),
        camera_position=camera_position,
        arrow_head_size=10.0,
        line_widths=[1.5, 1.5],
        dot_size=4.0,
    )
    render_asymptote(joinpath(img_folder, experiment_name * "-orig.asy"); render=2)
end
```

Which is the following cure, which clearly starts and ends slower than its speed in the middle,
which can be seen by the increasing length of the gangent vectors in the middle.

![The original curve](img/bezier/bezier-acceleration-orig.png)

We continue to recude the points, since we “know” sme points due to the $C^1$ property:
the second to last control point of the first segment $b_{0,2}$, the joint junction point
connecting both segments $b_{0,3}=b_{1,0}$ and the second control point $b_{1,1}$ of the second segment have to
line in the tangent space of the joint junction point. Hence we only have to store one of the
control points.

We can use this reduced form as the variable to optimize and the one from the data as our initial point.
```{julia}
pB = get_Bezier_points(M, B, :differentiable)
N = PowerManifold(M, NestedPowerRepresentation(), length(pB))
```

And we further define the acceleration of the curve as our cost function, where we
discretize the acceleration at a certain set of points and set the $λ=10$
```{julia}
curve_samples = [range(0, 3; length=101)...] # sample curve for the gradient
λ = 10.0
function f(M, pB)
    return L2_acceleration_Bezier(
        M.manifold, pB, get_Bezier_degrees(M.manifold, B), curve_samples, λ, data_points
    )
end
function grad_f(M, pB)
    return grad_L2_acceleration_Bezier(
        M.manifold, pB, get_Bezier_degrees(M.manifold, B), curve_samples, λ, data_points
    )
end
```

Then we can optimize

```{julia}
x0 = pB
pB_opt = gradient_descent(
    N,
    f,
    grad_f,
    x0;
    stepsize=ArmijoLinesearch(N;
        initial_stepsize=1.0,
        retraction_method=ExponentialRetraction(),
        contraction_factor=0.5,
        sufficient_decrease=0.001,
    ),
    stopping_criterion=StopWhenChangeLess(1e-5) |
                       StopWhenGradientNormLess(1e-7) |
                       StopAfterIteration(300),
    debug=[
        :Iteration,
        " | ",
        :Cost,
        " | ",
        DebugGradientNorm(),
        " | ",
        DebugStepsize(),
        " | ",
        :Change,
        "\n",
        25,
        :Stop,
    ],
);
```

And we can again look at the result
```{julia}
#| echo: false
#| code-fold: true
#| output: false
if export_asymptote
    B_opt = get_Bezier_segments(M, pB_opt, get_Bezier_degrees(M, B), :differentiable)
    res_curve = de_Casteljau(M, B_opt, curve_samples_plot)
    asymptote_export_S2_signals(
        joinpath(img_folder, experiment_name * "-result.asy");
        curves=[res_curve, original_curve_plot_pts],
        points=[get_Bezier_junctions(M, B_opt), get_Bezier_inner_points(M, B_opt)],
        tangent_vectors=[[
            Tuple(a) for a in zip(
                get_Bezier_junctions(M, B_opt, true),
                get_Bezier_junction_tangent_vectors(M, B_opt),
            )
        ]],
        colors=Dict(
            :curves => [curve_color, control_point_color],
            :points => [data_color, inner_control_point_color],
            :tvectors => [tangent_vector_color],
        ),
        camera_position=camera_position,
        arrow_head_size=10.0,
        line_widths=[1.5, 0.75, 1.5],
        dot_size=4.0,
    )
    render_asymptote(joinpath(img_folder, experiment_name * "-result.asy"); render=4)
end
```

The result looks as

![The resulting curve](img/bezier/bezier-acceleration-result.png)

where all control points are evenly spaced and we hence have less acceleration
as the final cost compared to the initial one indicates. Note that the cost is not zero,
since we always have a tradeoff between approximating the initial junctinons (data points)
and minimizing the acceleration.

````{=commonmark}
```@bibliography
Pages = ["Bezier-curves.md"]
Canonical=false
```
````