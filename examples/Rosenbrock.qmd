---
title: "The Rosenbrock Function"
author:
  - "Ronny Bergmann"
date: 01/03/2023
---

After loading the necessary packages

```{julia}
#| output: false
using Pkg;
cd(@__DIR__)
Pkg.activate("."); # use the example environment,
```

```{julia}
#| output: false
using Manifolds, Manopt, ManoptExamples
using Plots
```

We fix the parameters for the
[üìñ Rosenbrock](https://en.wikipedia.org/wiki/Rosenbrock_function) (where the wikipedia page has a slightly different parameter naming).

```{julia}
#| output: false
a = 100.0
b = 1.0
p0 = [1/10, 2/10]
```

which is defined on $\mathbb R^2$, so we need

```{julia}
M = ‚Ñù^2
```


and can then generate both the cost and the gradient

```{julia}
f = ManoptExamples.RosenbrockCost(M; a=a, b=b)
grad_f = ManoptExamples.RosenbrockGradient!!(M; a=a, b=b)
```

For comparison, we look at the initial cost

```{julia}
f(M, p0)
```

And to illustrate, we run two small solvers with their default settings as a comparison.

## Gradient Descent

We start with the [gradient descent solver](https://manoptjl.org/stable/solvers/gradient_descent/#Manopt.gradient_descent).

Since we need the state anyways to access the record, we also get from the `return_state=true`
a short summary of the solver run.

```{julia}
gd_state = gradient_descent(M, f, grad_f, p0; record = [:Iteration, :Cost], return_state=true)
```


From the summary we see, that the gradient is not yet small enough, but we hit
the 200 iterations (default) iteration limit.
Collecting the cost recording and printing the final cost

```{julia}
gd_x = get_record(gd_state, :Iteration, :Iteration)
gd_y =  get_record(gd_state, :Iteration, :Cost)
f(M, get_solver_result(gd_state))
```

## Quasi Newton

We can improve this using the [quasi Newton](https://manoptjl.org/stable/solvers/quasi_Newton/#Manopt.quasi_Newton) algorithm

```{julia}
qn_state = quasi_Newton(M, f, grad_f, p0;
    record = [:Iteration, :Cost], return_state=true
)
```

And we see it stops far earlier, after 45 Iterations. We again collect the recorded values

```{julia}
qn_x = get_record(qn_state, :Iteration, :Iteration)
qn_y =  get_record(qn_state, :Iteration, :Cost)
f(M, get_solver_result(qn_state))
```

and see that the final value is close to the one of the minimizer

```{julia}
f(M, ManoptExamples.minimizer(f))
```

which we also see if we plot the recorded cost.

```{julia}
#| label: fig-pca
#| fig-cap: "The result of the robust PCA vs. SVD"
fig = plot(gd_x, gd_y; linewidth=1, label="Gradient Descent");
plot!(fig, qn_x, qn_y; linewidth=1, label="Quasi Newton")
```